node {
    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Git branch to pull')
        string(name: 'giturl', defaultValue: 'https://github.com/khushpardhi/wanderlust.git', description: 'cloning the code from github')
        string(name: 'DOCKERHUB_USERNAME', defaultValue: 'khushpardhi', description: 'username of dockerhub)
    }
    try {
        stage('clone code') {
            cleanWs()  // Clean workspace before starting the job
            // Clone the Git repository
            git url: "${params.giturl}", branch: "${params.BRANCH_NAME}"
        }

        stage('login to DockerHub') {
            // Login to DockerHub using stored credentials
            withCredentials([usernamePassword(credentialsId: "dockerHub", passwordVariable: "dockerHubPass", usernameVariable: "dockerHubUser")]) {
                sh "docker login -u ${params.DOCKERHUB_USERNAME} -p ${env.dockerHubPass}"
            }
        }
                stage('pull from dockerhub') {
            script {
                def DOCKER_IMAGES = [
                    "khushpardhi/backend:latest",
                    "khushpardhi/frontend:latest"
                ]
                for (image in DOCKER_IMAGES) {
                    echo "Pulling Docker image: ${image}"
                    sh "docker pull ${image}"
                }
            }
        }
stage('Deploy') {
            script {
                def containersRunning = sh(script: "docker ps -q --filter 'label=com.docker.compose.project=wanderlust'", returnStdout: true).trim()
                if (containersRunning) {
                    echo "Containers are already running. Shutting them down and restarting..."
                    sh "docker-compose down"
                    sh "docker-compose up -d"
                } else {
                    echo "No containers are running. Starting the containers..."
                    sh "docker-compose up -d"
                }
            }
        }

    } catch (Exception e) {
        throw e
    } 
}
