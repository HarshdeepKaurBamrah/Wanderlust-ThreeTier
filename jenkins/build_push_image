node {
    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'git is my variable name and git hub is my value')
        run(name: 'DOCKER_IMAGES', defaultValue: 'khushpardhi/backend:latest\nkhushpardhi/frontend:latest', description: 'git is my variable name and git hub is my value')
    }
    try {
        stage('clone code') {
            cleanWs()  // Clean workspace before starting the job
            // Clone the Git repository
            git url: "https://github.com/khushpardhi/wanderlust.git", branch: "${params.BRANCH_NAME}"
        }

        stage('login to DockerHub') {
            // Login to DockerHub using stored credentials
            withCredentials([usernamePassword(credentialsId: "dockerHub", passwordVariable: "dockerHubPass", usernameVariable: "dockerHubUser")]) {
                sh "docker login -u ${env.dockerHubUser} -p ${env.dockerHubPass}"
            }
        }
        stage('Pull Docker Images') {
            steps {
                script {
                    // Split the DOCKER_IMAGES parameter into a list of Docker images
                    def dockerImages = params.DOCKER_IMAGES.split("\n")
                    for (image in dockerImages) {
                        echo "Pulling Docker image: ${image}"
                        sh "docker pull ${image}"
                    }
                }
            }
        }

        stage('Deploy') {
            script {
                // Check if containers from the Docker Compose project are running
                def containersRunning = sh(script: "docker ps -q --filter 'label=com.docker.compose.project=wanderlust'", returnStdout: true).trim()
                if (containersRunning) {
                    echo "Containers are already running. Stopping and restarting..."
                    sh "docker-compose down"
                    sh "docker-compose up -d"
                } else {
                    echo "No containers are running. Starting the containers..."
                    sh "docker-compose up -d"
                }
            }
        }
    } catch (Exception e) {
        currentBuild.result = 'FAILURE'
        throw e
    } finally {
        // Clean up workspace after job
        cleanWs()
    }
}
