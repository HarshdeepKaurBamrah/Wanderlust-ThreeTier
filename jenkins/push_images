node {
    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Git branch to pull')
        string(name: 'giturl', defaultValue: 'https://github.com/khushpardhi/wanderlust.git', description: 'cloning the code from github')
        string(name: 'DOCKERHUB_USERNAME', defaultValue: 'khushpardhi', description: 'username of dockerhub')
        string(name: 'DOCKERHUB_PASSWORD', defaultValue: 'KHush##@@123', description: 'this is dockerhub password')
        string(name: 'FRONTEND_IMAGE', defaultValue: 'khushpardhi/frontend:latest', description: 'this is the frontend image')
        string(name: 'BACKEND_IMAGE', defaultValue: 'khushpardhi/backend:latest', description: 'this is the backend image')
}
    try {
        stage("Clone Code") {
            cleanWs()
            git url: "${params.giturl}", branch: "${params.BRANCH_NAME}"
        }

        stage("Login to DockerHub") {
            withCredentials([usernamePassword(credentialsId: "dockerHub", passwordVariable: "dockerHubPass", usernameVariable: "dockerHubUser")]) {
                sh "docker login -u ${params.DOCKERHUB_USERNAME} -p ${params.DOCKERHUB_PASSWORD}"
            }
        }

        stage("Build Docker Images with Docker Compose") {
            echo "Building Docker images using docker-compose..."
            sh "docker-compose build"
        }

        stage("Push Docker Images to DockerHub") {
            def DOCKER_IMAGES = [
                "${params.BACKEND_IMAGE}"
                "${params.FRONTEND_IMAGE}"
            ]
            for (image in DOCKER_IMAGES) {
                echo "Pushing Docker image: ${image}"
                sh "docker push ${image}"
            }
        }
    } catch (Exception e) {
        currentBuild.result = "FAILURE"
        throw e
    }
}
